{"ast":null,"code":"import { ActionStrategy } from './action-strategy';\nimport { StyleManager } from '../../style-manager/style-manager';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../web-apis/speech-synthesizer.service\";\nexport let ChangeThemeStrategy = /*#__PURE__*/(() => {\n  class ChangeThemeStrategy extends ActionStrategy {\n    constructor(speechSynthesizer) {\n      super();\n      this.speechSynthesizer = speechSynthesizer;\n      this.mapThemes = new Map();\n      this.styleManager = new StyleManager();\n      this.mapStartSignal.set('en-US', 'perform change theme');\n      this.mapStartSignal.set('es-ES', 'iniciar cambio de tema');\n      this.mapEndSignal.set('en-US', 'finish change theme');\n      this.mapEndSignal.set('es-ES', 'finalizar cambio de tema');\n      this.mapInitResponse.set('en-US', 'Please, tell me your theme name.');\n      this.mapInitResponse.set('es-ES', 'Por favor, mencione el nombre de tema.');\n      this.mapActionDone.set('en-US', 'Changing Theme of the Application to');\n      this.mapActionDone.set('es-ES', 'Cambiando el tema de la Aplicación a');\n      this.mapThemes.set('en-US', [{\n        keyword: 'deep purple',\n        href: 'deeppurple-amber.css'\n      }, {\n        keyword: 'indigo',\n        href: 'indigo-pink.css'\n      }, {\n        keyword: 'pink',\n        href: 'pink-bluegrey.css'\n      }, {\n        keyword: 'purple',\n        href: 'purple-green.css'\n      }]);\n      this.mapThemes.set('es-ES', [{\n        keyword: 'púrpura',\n        href: 'deeppurple-amber.css'\n      }, {\n        keyword: 'azul',\n        href: 'indigo-pink.css'\n      }, {\n        keyword: 'rosa',\n        href: 'pink-bluegrey.css'\n      }, {\n        keyword: 'verde',\n        href: 'purple-green.css'\n      }]);\n    }\n\n    runAction(input, language) {\n      const themes = this.mapThemes.get(language) || [];\n      const theme = themes.find(th => {\n        return input.toLocaleLowerCase() === th.keyword;\n      });\n\n      if (theme) {\n        this.styleManager.removeStyle('theme');\n        this.styleManager.setStyle('theme', `assets/theme/${theme.href}`);\n        this.speechSynthesizer.speak(`${this.mapActionDone.get(language)}: ${theme.keyword}`, language);\n      }\n    }\n\n  }\n\n  ChangeThemeStrategy.ɵfac = function ChangeThemeStrategy_Factory(t) {\n    return new (t || ChangeThemeStrategy)(i0.ɵɵinject(i1.SpeechSynthesizerService));\n  };\n\n  ChangeThemeStrategy.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChangeThemeStrategy,\n    factory: ChangeThemeStrategy.ɵfac,\n    providedIn: 'root'\n  });\n  return ChangeThemeStrategy;\n})();","map":null,"metadata":{},"sourceType":"module"}