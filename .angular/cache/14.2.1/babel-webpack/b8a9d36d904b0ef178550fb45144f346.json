{"ast":null,"code":"import { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SpeechError } from '../../model/speech-error';\nimport { SpeechEvent } from '../../model/speech-event';\nimport * as i0 from \"@angular/core\";\nexport let SpeechRecognizerService = /*#__PURE__*/(() => {\n  class SpeechRecognizerService {\n    constructor(ngZone) {\n      this.ngZone = ngZone;\n      this.isListening = false;\n    }\n\n    initialize(language) {\n      if ('webkitSpeechRecognition' in window) {\n        this.recognition = new webkitSpeechRecognition();\n        this.recognition.continuous = true;\n        this.recognition.interimResults = true;\n        this.setLanguage(language);\n        return true;\n      }\n\n      return false;\n    }\n\n    setLanguage(language) {\n      this.language = language;\n      this.recognition.lang = language;\n    }\n\n    start() {\n      if (!this.recognition) {\n        return;\n      }\n\n      this.recognition.start();\n      this.isListening = true;\n    }\n\n    onStart() {\n      if (!this.recognition) {\n        this.initialize(this.language);\n      }\n\n      return new Observable(observer => {\n        this.recognition.onstart = () => {\n          this.ngZone.run(() => {\n            observer.next({\n              event: SpeechEvent.Start\n            });\n          });\n        };\n      });\n    }\n\n    onEnd() {\n      return new Observable(observer => {\n        this.recognition.onend = () => {\n          this.ngZone.run(() => {\n            observer.next({\n              event: SpeechEvent.End\n            });\n            this.isListening = false;\n          });\n        };\n      });\n    }\n\n    onResult() {\n      return new Observable(observer => {\n        this.recognition.onresult = event => {\n          let interimContent = '';\n          let finalContent = '';\n\n          for (let i = event.resultIndex; i < event.results.length; ++i) {\n            if (event.results[i].isFinal) {\n              finalContent += event.results[i][0].transcript;\n              this.ngZone.run(() => {\n                observer.next({\n                  event: SpeechEvent.FinalContent,\n                  content: finalContent\n                });\n              });\n            } else {\n              interimContent += event.results[i][0].transcript; // console.log('interim transcript', event, interimContent);\n\n              this.ngZone.run(() => {\n                observer.next({\n                  event: SpeechEvent.InterimContent,\n                  content: interimContent\n                });\n              });\n            }\n          }\n        };\n      });\n    }\n\n    onError() {\n      return new Observable(observer => {\n        this.recognition.onerror = event => {\n          // tslint:disable-next-line:no-any\n          const eventError = event.error;\n          console.log('error', eventError);\n          let error;\n\n          switch (eventError) {\n            case 'no-speech':\n              error = SpeechError.NoSpeech;\n              break;\n\n            case 'audio-capture':\n              error = SpeechError.AudioCapture;\n              break;\n\n            case 'not-allowed':\n              error = SpeechError.NotAllowed;\n              break;\n\n            default:\n              error = SpeechError.Unknown;\n              break;\n          }\n\n          this.ngZone.run(() => {\n            observer.next({\n              error\n            });\n          });\n        };\n      });\n    }\n\n    stop() {\n      this.recognition.stop();\n    }\n\n  }\n\n  SpeechRecognizerService.ɵfac = function SpeechRecognizerService_Factory(t) {\n    return new (t || SpeechRecognizerService)(i0.ɵɵinject(i0.NgZone));\n  };\n\n  SpeechRecognizerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpeechRecognizerService,\n    factory: SpeechRecognizerService.ɵfac,\n    providedIn: 'root'\n  });\n  return SpeechRecognizerService;\n})();","map":null,"metadata":{},"sourceType":"module"}