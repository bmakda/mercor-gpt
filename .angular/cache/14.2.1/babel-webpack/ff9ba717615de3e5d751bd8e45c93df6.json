{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./change-theme-strategy\";\nimport * as i2 from \"./change-title-strategy\";\nimport * as i3 from \"@angular/platform-browser\";\nimport * as i4 from \"../web-apis/speech-synthesizer.service\";\nexport let ActionContext = /*#__PURE__*/(() => {\n  class ActionContext {\n    constructor(changeThemeStrategy, changeTitleStrategy, titleService, speechSynthesizer) {\n      this.changeThemeStrategy = changeThemeStrategy;\n      this.changeTitleStrategy = changeTitleStrategy;\n      this.titleService = titleService;\n      this.speechSynthesizer = speechSynthesizer;\n      this.changeTitleStrategy.titleService = titleService;\n    }\n\n    processMessage(message, language) {\n      const msg = message.toLowerCase();\n      const hasChangedStrategy = this.hasChangedStrategy(msg, language);\n      let isFinishSignal = false;\n\n      if (!hasChangedStrategy) {\n        isFinishSignal = this.isFinishSignal(msg, language);\n      }\n\n      if (!hasChangedStrategy && !isFinishSignal) {\n        this.runAction(message, language);\n      }\n    }\n\n    runAction(input, language) {\n      if (this.currentStrategy) {\n        this.currentStrategy.runAction(input, language);\n      }\n    }\n\n    setStrategy(strategy) {\n      this.currentStrategy = strategy;\n    }\n\n    hasChangedStrategy(message, language) {\n      let strategy;\n\n      if (message === this.changeThemeStrategy.getStartSignal(language)) {\n        strategy = this.changeThemeStrategy;\n      }\n\n      if (message === this.changeTitleStrategy.getStartSignal(language)) {\n        strategy = this.changeTitleStrategy;\n      }\n\n      if (strategy) {\n        this.setStrategy(strategy);\n        this.speechSynthesizer.speak(strategy.getInitialResponse(language), language);\n        return true;\n      }\n\n      return false;\n    }\n\n    isFinishSignal(message, language) {\n      if (message === this.changeThemeStrategy.getEndSignal(language) || message === this.changeTitleStrategy.getEndSignal(language)) {\n        if (this.currentStrategy) {\n          this.speechSynthesizer.speak(this.currentStrategy.getFinishResponse(language), language);\n        }\n\n        this.setStrategy(undefined);\n        return true;\n      }\n\n      return false;\n    }\n\n  }\n\n  ActionContext.ɵfac = function ActionContext_Factory(t) {\n    return new (t || ActionContext)(i0.ɵɵinject(i1.ChangeThemeStrategy), i0.ɵɵinject(i2.ChangeTitleStrategy), i0.ɵɵinject(i3.Title), i0.ɵɵinject(i4.SpeechSynthesizerService));\n  };\n\n  ActionContext.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ActionContext,\n    factory: ActionContext.ɵfac,\n    providedIn: 'root'\n  });\n  return ActionContext;\n})();","map":null,"metadata":{},"sourceType":"module"}