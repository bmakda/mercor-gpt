{"ast":null,"code":"import { NgZone } from '@angular/core';\nimport { merge, of, Subject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { defaultLanguage, languages } from '../shared/model/languages';\nimport { SpeechError } from '../shared/model/speech-error';\nimport { SpeechEvent } from '../shared/model/speech-event';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/services/web-apis/speech-recognizer.service\";\nimport * as i2 from \"../shared/services/actions/action-context\";\nimport * as i3 from \"../helper\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/core\";\n\nfunction WebSpeechComponent_mat_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const errorMessage_r6 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(errorMessage_r6);\n  }\n}\n\nfunction WebSpeechComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-option\", 10);\n    i0.ɵɵlistener(\"click\", function WebSpeechComponent_mat_option_8_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const language_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.selectLanguage(language_r7));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const language_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", language_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", language_r7, \" \");\n  }\n}\n\nfunction WebSpeechComponent_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function WebSpeechComponent_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.stop());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 12);\n    i0.ɵɵtext(2, \"mic\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction WebSpeechComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function WebSpeechComponent_ng_template_12_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.start());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"mic\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction WebSpeechComponent_section_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"section\")(1, \"mat-card\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 1, ctx_r5.transcript$));\n  }\n}\n\nexport class WebSpeechComponent {\n  constructor(speechRecognizer, actionContext, helper, ngZone) {\n    this.speechRecognizer = speechRecognizer;\n    this.actionContext = actionContext;\n    this.helper = helper;\n    this.ngZone = ngZone;\n    this.languages = languages;\n    this.currentLanguage = defaultLanguage;\n    this.defaultError$ = new Subject();\n    this.BACKEND_SERVER_URL = environment.base_url;\n  }\n\n  ngOnInit() {\n    const webSpeechReady = this.speechRecognizer.initialize(this.currentLanguage);\n\n    if (webSpeechReady) {\n      this.initRecognition();\n    } else {\n      this.errorMessage$ = of('Your Browser is not supported. Please try Google Chrome.');\n    }\n  }\n\n  start() {\n    if (this.speechRecognizer.isListening) {\n      this.stop();\n      return;\n    }\n\n    this.defaultError$.next(undefined);\n    this.speechRecognizer.start();\n  }\n\n  stop() {\n    this.speechRecognizer.stop();\n  }\n\n  selectLanguage(language) {\n    if (this.speechRecognizer.isListening) {\n      this.stop();\n    }\n\n    this.currentLanguage = language;\n    this.speechRecognizer.setLanguage(this.currentLanguage);\n  }\n\n  initRecognition() {\n    this.transcript$ = this.speechRecognizer.onResult().pipe(tap(notification => {\n      this.processNotification(notification);\n    }), map(notification => notification.content || ''));\n    this.listening$ = merge(this.speechRecognizer.onStart(), this.speechRecognizer.onEnd()).pipe(map(notification => notification.event === SpeechEvent.Start));\n    this.errorMessage$ = merge(this.speechRecognizer.onError(), this.defaultError$).pipe(map(data => {\n      if (data === undefined) {\n        return '';\n      }\n\n      if (typeof data === 'string') {\n        return data;\n      }\n\n      let message;\n\n      switch (data.error) {\n        case SpeechError.NotAllowed:\n          message = `Cannot run the demo.\n            Your browser is not authorized to access your microphone.\n            Verify that your browser has access to your microphone and try again.`;\n          break;\n\n        case SpeechError.NoSpeech:\n          message = `No speech has been detected. Please try again.`;\n          break;\n\n        case SpeechError.AudioCapture:\n          message = `Microphone is not available. Plese verify the connection of your microphone and try again.`;\n          break;\n\n        default:\n          message = '';\n          break;\n      }\n\n      return message;\n    }));\n  }\n\n  processNotification(notification) {\n    if (notification.event === SpeechEvent.FinalContent) {\n      const message = notification.content?.trim() || '';\n      this.actionContext.processMessage(message, this.currentLanguage); // this.actionContext.runAction(message, this.currentLanguage);\n\n      this.totalTranscript = this.totalTranscript ? `${this.totalTranscript}\\n${message}` : notification.content;\n      this.stop();\n      this.sendToServer(notification.content);\n    }\n  }\n\n  sendToServer(queryText) {\n    if (queryText && queryText.trim() !== \"\") {\n      let json = {\n        queryData: queryText\n      };\n      this.helper.httpMethodRequester(\"POST\", '/api/gpt', json, true, true, response_data => {\n        console.log(response_data);\n\n        if (response_data.success && response_data.filePath) {\n          this.ngZone.run(() => {\n            this.totalResult += response_data.answer;\n          });\n          let audio = new Audio();\n          audio.src = `${this.BACKEND_SERVER_URL}/${response_data.filePath}`;\n          audio.load();\n          audio.play();\n        } else {\n          console.log(\"sendToServer Error from Server\");\n        }\n      });\n    }\n  }\n\n}\n\nWebSpeechComponent.ɵfac = function WebSpeechComponent_Factory(t) {\n  return new (t || WebSpeechComponent)(i0.ɵɵdirectiveInject(i1.SpeechRecognizerService), i0.ɵɵdirectiveInject(i2.ActionContext), i0.ɵɵdirectiveInject(i3.Helper), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nWebSpeechComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WebSpeechComponent,\n  selectors: [[\"wsa-web-speech\"]],\n  decls: 22,\n  vars: 14,\n  consts: [[\"class\", \"notification\", 4, \"ngIf\"], [3, \"value\", \"valueChange\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"mat-fab\", \"\", 3, \"click\", 4, \"ngIf\", \"ngIfElse\"], [\"mic\", \"\"], [4, \"ngIf\"], [1, \"speech-result-width\"], [\"matInput\", \"\", \"placeholder\", \"Speech Input Result\", \"rows\", \"15\", \"disabled\", \"true\", 3, \"value\"], [\"matInput\", \"\", \"placeholder\", \"Speech Output Result\", \"rows\", \"15\", \"disabled\", \"true\", 3, \"value\"], [1, \"notification\"], [3, \"value\", \"click\"], [\"mat-fab\", \"\", 3, \"click\"], [1, \"soundwave\"], [1, \"notification\", \"mat-elevation-z4\"]],\n  template: function WebSpeechComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\");\n      i0.ɵɵtemplate(1, WebSpeechComponent_mat_card_1_Template, 2, 1, \"mat-card\", 0);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"section\")(4, \"mat-form-field\")(5, \"mat-label\");\n      i0.ɵɵtext(6, \"Select your language\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"mat-select\", 1);\n      i0.ɵɵlistener(\"valueChange\", function WebSpeechComponent_Template_mat_select_valueChange_7_listener($event) {\n        return ctx.currentLanguage = $event;\n      });\n      i0.ɵɵtemplate(8, WebSpeechComponent_mat_option_8_Template, 2, 2, \"mat-option\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"section\");\n      i0.ɵɵtemplate(10, WebSpeechComponent_button_10_Template, 3, 0, \"button\", 3);\n      i0.ɵɵpipe(11, \"async\");\n      i0.ɵɵtemplate(12, WebSpeechComponent_ng_template_12_Template, 3, 0, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, WebSpeechComponent_section_14_Template, 4, 3, \"section\", 5);\n      i0.ɵɵpipe(15, \"async\");\n      i0.ɵɵelementStart(16, \"section\")(17, \"mat-form-field\", 6);\n      i0.ɵɵelement(18, \"textarea\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"section\")(20, \"mat-form-field\", 6);\n      i0.ɵɵelement(21, \"textarea\", 8);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(13);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 8, ctx.errorMessage$));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"value\", ctx.currentLanguage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.languages);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(11, 10, ctx.listening$))(\"ngIfElse\", _r3);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(15, 12, ctx.transcript$));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"value\", ctx.totalTranscript || \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"value\", ctx.totalResult || \"\");\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i5.MatButton, i6.MatCard, i7.MatFormField, i7.MatLabel, i8.MatInput, i9.MatIcon, i10.MatSelect, i11.MatOption, i4.AsyncPipe],\n  styles: [\".speech-result-width[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\ntextarea[_ngcontent-%COMP%] {\\n  text-align: justify;\\n  text-align-last: center;\\n}\\n\\nsection[_ngcontent-%COMP%] {\\n  padding: 15px;\\n  text-align: center;\\n}\\n\\n.mat-input-element[_ngcontent-%COMP%]:disabled {\\n  color: rgba(0, 0, 0, 0.9);\\n}\\n\\n.notification[_ngcontent-%COMP%] {\\n  margin-left: 20px;\\n  margin-right: 20px;\\n}\\n\\n.soundwave[_ngcontent-%COMP%] {\\n  animation: soundwave 0.7s infinite;\\n}\\n\\n@keyframes soundwave {\\n  from {\\n    opacity: 0.5;\\n    color: #ffffff;\\n  }\\n  20% {\\n    color: #ffffff;\\n    opacity: 0.6;\\n  }\\n  35% {\\n    color: #ffffff;\\n    opacity: 0.9;\\n  }\\n  45% {\\n    color: #ffffff;\\n    opacity: 1;\\n  }\\n  55% {\\n    color: #ffffff;\\n    opacity: 0.9;\\n  }\\n  to {\\n    color: #ffffff;\\n    opacity: 0.5;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYi1zcGVlY2guY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGtDQUFrQztBQUNwQzs7QUFFQTtFQUNFO0lBQ0UsWUFBWTtJQUNaLGNBQWM7RUFDaEI7RUFDQTtJQUNFLGNBQWM7SUFDZCxZQUFZO0VBQ2Q7RUFDQTtJQUNFLGNBQWM7SUFDZCxZQUFZO0VBQ2Q7RUFDQTtJQUNFLGNBQWM7SUFDZCxVQUFVO0VBQ1o7RUFDQTtJQUNFLGNBQWM7SUFDZCxZQUFZO0VBQ2Q7RUFDQTtJQUNFLGNBQWM7SUFDZCxZQUFZO0VBQ2Q7QUFDRiIsImZpbGUiOiJ3ZWItc3BlZWNoLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3BlZWNoLXJlc3VsdC13aWR0aCB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG50ZXh0YXJlYSB7XG4gIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xufVxuXG5zZWN0aW9uIHtcbiAgcGFkZGluZzogMTVweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4ubWF0LWlucHV0LWVsZW1lbnQ6ZGlzYWJsZWQge1xuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpO1xufVxuXG4ubm90aWZpY2F0aW9uIHtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn1cblxuLnNvdW5kd2F2ZSB7XG4gIGFuaW1hdGlvbjogc291bmR3YXZlIDAuN3MgaW5maW5pdGU7XG59XG5cbkBrZXlmcmFtZXMgc291bmR3YXZlIHtcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTogMC41O1xuICAgIGNvbG9yOiAjZmZmZmZmO1xuICB9XG4gIDIwJSB7XG4gICAgY29sb3I6ICNmZmZmZmY7XG4gICAgb3BhY2l0eTogMC42O1xuICB9XG4gIDM1JSB7XG4gICAgY29sb3I6ICNmZmZmZmY7XG4gICAgb3BhY2l0eTogMC45O1xuICB9XG4gIDQ1JSB7XG4gICAgY29sb3I6ICNmZmZmZmY7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuICA1NSUge1xuICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgIG9wYWNpdHk6IDAuOTtcbiAgfVxuICB0byB7XG4gICAgY29sb3I6ICNmZmZmZmY7XG4gICAgb3BhY2l0eTogMC41O1xuICB9XG59XG4iXX0= */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"AAAA,SAAqDA,MAArD,QAAmE,eAAnE;AACA,SAASC,KAAT,EAA4BC,EAA5B,EAAgCC,OAAhC,QAA+C,MAA/C;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,gBAAzB;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,2BAA3C;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAKA,SAASC,WAAT,QAA4B,8BAA5B;;;;;;;;;;;;;;;;ICTIC;IAA4EA;IAAgBA;;;;;IAAhBA;IAAAA;;;;;;;;IAMxEA;IAAkEA;MAAA;MAAA;MAAA;MAAA,OAASA,kDAAT;IAAiC,CAAjC;IAChEA;IACFA;;;;;IAF+CA;IAC7CA;IAAAA;;;;;;;;IAMNA;IAAqDA;MAAAA;MAAA;MAAA,OAASA,8BAAT;IAAe,CAAf;IACnDA;IAA4BA;IAAGA;;;;;;;;IAG/BA;IAAgBA;MAAAA;MAAA;MAAA,OAASA,+BAAT;IAAgB,CAAhB;IACdA;IAAUA;IAAGA;;;;;;IAIrBA,gCAAqC,CAArC,EAAqC,UAArC,EAAqC,EAArC;IACkDA;;IAAuBA;;;;;IAAvBA;IAAAA;;;;ADNlD,OAAM,MAAOC,kBAAP,CAAyB;EAW7BC,YACUC,gBADV,EAEUC,aAFV,EAGSC,MAHT,EAISC,MAJT,EAIuB;IAHb;IACA;IACD;IACA;IAdT,iBAAsBV,SAAtB;IACA,uBAA0BD,eAA1B;IAMA,qBAAgB,IAAIH,OAAJ,EAAhB;IACQ,0BAA6BO,WAAW,CAACQ,QAAzC;EAOH;;EAELC,QAAQ;IACN,MAAMC,cAAc,GAAG,KAAKN,gBAAL,CAAsBO,UAAtB,CAAiC,KAAKC,eAAtC,CAAvB;;IACA,IAAIF,cAAJ,EAAoB;MAClB,KAAKG,eAAL;IACD,CAFD,MAEO;MACL,KAAKC,aAAL,GAAqBtB,EAAE,CAAC,0DAAD,CAAvB;IACD;EACF;;EAEDuB,KAAK;IACH,IAAI,KAAKX,gBAAL,CAAsBY,WAA1B,EAAuC;MACrC,KAAKC,IAAL;MACA;IACD;;IAED,KAAKC,aAAL,CAAmBC,IAAnB,CAAwBC,SAAxB;IACA,KAAKhB,gBAAL,CAAsBW,KAAtB;EACD;;EAEDE,IAAI;IACF,KAAKb,gBAAL,CAAsBa,IAAtB;EACD;;EAEDI,cAAc,CAACC,QAAD,EAAiB;IAC7B,IAAI,KAAKlB,gBAAL,CAAsBY,WAA1B,EAAuC;MACrC,KAAKC,IAAL;IACD;;IACD,KAAKL,eAAL,GAAuBU,QAAvB;IACA,KAAKlB,gBAAL,CAAsBmB,WAAtB,CAAkC,KAAKX,eAAvC;EACD;;EAEOC,eAAe;IACrB,KAAKW,WAAL,GAAmB,KAAKpB,gBAAL,CAAsBqB,QAAtB,GAAiCC,IAAjC,CACjB/B,GAAG,CAAEgC,YAAD,IAAiB;MACnB,KAAKC,mBAAL,CAAyBD,YAAzB;IACD,CAFE,CADc,EAIjBjC,GAAG,CAAEiC,YAAD,IAAkBA,YAAY,CAACE,OAAb,IAAwB,EAA3C,CAJc,CAAnB;IAOA,KAAKC,UAAL,GAAkBvC,KAAK,CACrB,KAAKa,gBAAL,CAAsB2B,OAAtB,EADqB,EAErB,KAAK3B,gBAAL,CAAsB4B,KAAtB,EAFqB,CAAL,CAGhBN,IAHgB,CAGXhC,GAAG,CAAEiC,YAAD,IAAkBA,YAAY,CAACM,KAAb,KAAuBlC,WAAW,CAACmC,KAAtD,CAHQ,CAAlB;IAKA,KAAKpB,aAAL,GAAqBvB,KAAK,CACxB,KAAKa,gBAAL,CAAsB+B,OAAtB,EADwB,EAExB,KAAKjB,aAFmB,CAAL,CAGnBQ,IAHmB,CAInBhC,GAAG,CAAE0C,IAAD,IAAS;MACX,IAAIA,IAAI,KAAKhB,SAAb,EAAwB;QACtB,OAAO,EAAP;MACD;;MACD,IAAI,OAAOgB,IAAP,KAAgB,QAApB,EAA8B;QAC5B,OAAOA,IAAP;MACD;;MACD,IAAIC,OAAJ;;MACA,QAAQD,IAAI,CAACE,KAAb;QACE,KAAKxC,WAAW,CAACyC,UAAjB;UACEF,OAAO,GAAG;;kFAAV;UAGA;;QACF,KAAKvC,WAAW,CAAC0C,QAAjB;UACEH,OAAO,GAAG,gDAAV;UACA;;QACF,KAAKvC,WAAW,CAAC2C,YAAjB;UACEJ,OAAO,GAAG,4FAAV;UACA;;QACF;UACEA,OAAO,GAAG,EAAV;UACA;MAdJ;;MAgBA,OAAOA,OAAP;IACD,CAzBE,CAJgB,CAArB;EA+BD;;EAEOT,mBAAmB,CAACD,YAAD,EAAyC;IAClE,IAAIA,YAAY,CAACM,KAAb,KAAuBlC,WAAW,CAAC2C,YAAvC,EAAqD;MACnD,MAAML,OAAO,GAAGV,YAAY,CAACE,OAAb,EAAsBc,IAAtB,MAAgC,EAAhD;MACA,KAAKtC,aAAL,CAAmBuC,cAAnB,CAAkCP,OAAlC,EAA2C,KAAKzB,eAAhD,EAFmD,CAGnD;;MACA,KAAKiC,eAAL,GAAuB,KAAKA,eAAL,GACnB,GAAG,KAAKA,eAAe,KAAKR,OAAO,EADhB,GAEnBV,YAAY,CAACE,OAFjB;MAIA,KAAKZ,IAAL;MACA,KAAK6B,YAAL,CAAkBnB,YAAY,CAACE,OAA/B;IACD;EACF;;EAEOiB,YAAY,CAACC,SAAD,EAA8B;IAChD,IAAIA,SAAS,IAAIA,SAAS,CAACJ,IAAV,OAAqB,EAAtC,EAA0C;MAExC,IAAIK,IAAI,GAAG;QACTC,SAAS,EAAEF;MADF,CAAX;MAIA,KAAKzC,MAAL,CAAY4C,mBAAZ,CAAgC,MAAhC,EAAwC,UAAxC,EAAoDF,IAApD,EAA0D,IAA1D,EAAgE,IAAhE,EAAuEG,aAAD,IAAuB;QAC3FC,OAAO,CAACC,GAAR,CAAYF,aAAZ;;QACA,IAAIA,aAAa,CAACG,OAAd,IAAyBH,aAAa,CAACI,QAA3C,EAAqD;UACnD,KAAKhD,MAAL,CAAYiD,GAAZ,CAAgB,MAAK;YACnB,KAAKC,WAAL,IAAoBN,aAAa,CAACO,MAAlC;UACD,CAFD;UAGA,IAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;UACAD,KAAK,CAACE,GAAN,GAAY,GAAG,KAAKC,kBAAkB,IAAIX,aAAa,CAACI,QAAQ,EAAhE;UACAI,KAAK,CAACI,IAAN;UACAJ,KAAK,CAACK,IAAN;QACD,CARD,MAQO;UACLZ,OAAO,CAACC,GAAR,CAAY,gCAAZ;QACD;MACF,CAbD;IAcD;EACF;;AAnI4B;;;mBAAlBnD,oBAAkBD;AAAA;;;QAAlBC;EAAkB+D;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MClB7BpE;MACEA;;MACFA;MACAA,gCAAS,CAAT,EAAS,gBAAT,EAAS,CAAT,EAAS,WAAT;MAEeA;MAAoBA;MAC/BA;MAAYA;QAAA;MAAA;MACVA;MAGFA;MAGJA;MACEA;;MAGAA;MAKFA;MACFA;;MAGAA,iCAAS,EAAT,EAAS,gBAAT,EAAS,CAAT;MAEIA;MACFA;MAGFA,iCAAS,EAAT,EAAS,gBAAT,EAAS,CAAT;MAEIA;MACFA;;;;;;MAlCaA;MAAAA;MAKGA;MAAAA;MACuBA;MAAAA;MAOpBA;MAAAA,8DAA0B,UAA1B,EAA0BqE,GAA1B;MASXrE;MAAAA;MAKaA;MAAAA;MAMAA;MAAAA","names":["NgZone","merge","of","Subject","map","tap","defaultLanguage","languages","SpeechError","SpeechEvent","environment","i0","WebSpeechComponent","constructor","speechRecognizer","actionContext","helper","ngZone","base_url","ngOnInit","webSpeechReady","initialize","currentLanguage","initRecognition","errorMessage$","start","isListening","stop","defaultError$","next","undefined","selectLanguage","language","setLanguage","transcript$","onResult","pipe","notification","processNotification","content","listening$","onStart","onEnd","event","Start","onError","data","message","error","NotAllowed","NoSpeech","AudioCapture","FinalContent","trim","processMessage","totalTranscript","sendToServer","queryText","json","queryData","httpMethodRequester","response_data","console","log","success","filePath","run","totalResult","answer","audio","Audio","src","BACKEND_SERVER_URL","load","play","selectors","decls","vars","consts","template","_r3"],"sourceRoot":"","sources":["C:\\Burhan\\Work\\Interview\\Mercor\\web-speech-angular-master\\src\\app\\web-speech\\web-speech.component.ts","C:\\Burhan\\Work\\Interview\\Mercor\\web-speech-angular-master\\src\\app\\web-speech\\web-speech.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit, NgZone } from '@angular/core';\nimport { merge, Observable, of, Subject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { defaultLanguage, languages } from '../shared/model/languages';\nimport { SpeechError } from '../shared/model/speech-error';\nimport { SpeechEvent } from '../shared/model/speech-event';\nimport { SpeechRecognizerService } from '../shared/services/web-apis/speech-recognizer.service';\nimport { ActionContext } from '../shared/services/actions/action-context';\nimport { SpeechNotification } from '../shared/model/speech-notification';\nimport { Helper } from '../helper';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'wsa-web-speech',\n  templateUrl: './web-speech.component.html',\n  styleUrls: ['./web-speech.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WebSpeechComponent implements OnInit {\n  languages: string[] = languages;\n  currentLanguage: string = defaultLanguage;\n  totalTranscript?: string;\n  totalResult: string\n  transcript$?: Observable<string>;\n  listening$?: Observable<boolean>;\n  errorMessage$?: Observable<string>;\n  defaultError$ = new Subject<string | undefined>();\n  private BACKEND_SERVER_URL: string = environment.base_url;\n\n  constructor(\n    private speechRecognizer: SpeechRecognizerService,\n    private actionContext: ActionContext,\n    public helper: Helper,\n    public ngZone: NgZone\n  ) { }\n\n  ngOnInit(): void {\n    const webSpeechReady = this.speechRecognizer.initialize(this.currentLanguage);\n    if (webSpeechReady) {\n      this.initRecognition();\n    } else {\n      this.errorMessage$ = of('Your Browser is not supported. Please try Google Chrome.');\n    }\n  }\n\n  start(): void {\n    if (this.speechRecognizer.isListening) {\n      this.stop();\n      return;\n    }\n\n    this.defaultError$.next(undefined);\n    this.speechRecognizer.start();\n  }\n\n  stop(): void {\n    this.speechRecognizer.stop();\n  }\n\n  selectLanguage(language: string): void {\n    if (this.speechRecognizer.isListening) {\n      this.stop();\n    }\n    this.currentLanguage = language;\n    this.speechRecognizer.setLanguage(this.currentLanguage);\n  }\n\n  private initRecognition(): void {\n    this.transcript$ = this.speechRecognizer.onResult().pipe(\n      tap((notification) => {\n        this.processNotification(notification);\n      }),\n      map((notification) => notification.content || '')\n    );\n\n    this.listening$ = merge(\n      this.speechRecognizer.onStart(),\n      this.speechRecognizer.onEnd()\n    ).pipe(map((notification) => notification.event === SpeechEvent.Start));\n\n    this.errorMessage$ = merge(\n      this.speechRecognizer.onError(),\n      this.defaultError$\n    ).pipe(\n      map((data) => {\n        if (data === undefined) {\n          return '';\n        }\n        if (typeof data === 'string') {\n          return data;\n        }\n        let message;\n        switch (data.error) {\n          case SpeechError.NotAllowed:\n            message = `Cannot run the demo.\n            Your browser is not authorized to access your microphone.\n            Verify that your browser has access to your microphone and try again.`;\n            break;\n          case SpeechError.NoSpeech:\n            message = `No speech has been detected. Please try again.`;\n            break;\n          case SpeechError.AudioCapture:\n            message = `Microphone is not available. Plese verify the connection of your microphone and try again.`;\n            break;\n          default:\n            message = '';\n            break;\n        }\n        return message;\n      })\n    );\n  }\n\n  private processNotification(notification: SpeechNotification<string>): void {\n    if (notification.event === SpeechEvent.FinalContent) {\n      const message = notification.content?.trim() || '';\n      this.actionContext.processMessage(message, this.currentLanguage);\n      // this.actionContext.runAction(message, this.currentLanguage);\n      this.totalTranscript = this.totalTranscript\n        ? `${this.totalTranscript}\\n${message}`\n        : notification.content;\n\n      this.stop();\n      this.sendToServer(notification.content);\n    }\n  }\n\n  private sendToServer(queryText: string | undefined) {\n    if (queryText && queryText.trim() !== \"\") {\n\n      let json = {\n        queryData: queryText\n      };\n\n      this.helper.httpMethodRequester(\"POST\", '/api/gpt', json, true, true, (response_data: any) => {\n        console.log(response_data);\n        if (response_data.success && response_data.filePath) {\n          this.ngZone.run(() => {\n            this.totalResult += response_data.answer;\n          })\n          let audio = new Audio();\n          audio.src = `${this.BACKEND_SERVER_URL}/${response_data.filePath}`;\n          audio.load();\n          audio.play();\n        } else {\n          console.log(\"sendToServer Error from Server\");\n        }\n      })\n    }\n  }\n}\n","  <section>\n    <mat-card *ngIf=\"errorMessage$| async as errorMessage\" class=\"notification\">{{errorMessage}}</mat-card>\n  </section>\n  <section>\n    <mat-form-field>\n      <mat-label>Select your language</mat-label>\n      <mat-select [(value)]=\"currentLanguage\">\n        <mat-option *ngFor=\"let language of languages\" [value]=\"language\" (click)=\"selectLanguage(language)\">\n          {{language}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </section>\n  <section>\n    <button mat-fab *ngIf=\"listening$ | async; else mic\" (click)=\"stop()\">\n      <mat-icon class=\"soundwave\">mic</mat-icon>\n    </button>\n    <ng-template #mic>\n      <button mat-fab (click)=\"start()\">\n        <mat-icon>mic</mat-icon>\n      </button>\n    </ng-template>\n  </section>\n<section *ngIf=\"transcript$ | async\">\n  <mat-card class=\"notification mat-elevation-z4\">{{transcript$ | async}}</mat-card>\n</section>\n<section>\n  <mat-form-field class=\"speech-result-width\">\n    <textarea matInput [value]=\"totalTranscript || ''\" placeholder=\"Speech Input Result\" rows=\"15\" disabled=\"true\"></textarea>\n  </mat-form-field>\n</section>\n\n<section>\n  <mat-form-field class=\"speech-result-width\">\n    <textarea matInput [value]=\"totalResult || ''\" placeholder=\"Speech Output Result\" rows=\"15\" disabled=\"true\"></textarea>\n  </mat-form-field>\n</section>\n"]},"metadata":{},"sourceType":"module"}